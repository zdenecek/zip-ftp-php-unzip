# .github/actions/ftp-deploy/action.yml
name: 'FTP Deploy & Remote Unzip'
description: >
  Zips a specified path, uploads it via FTP (along with a built‑in
  PHP unzip script), then triggers that script to extract your ZIP.
inputs:
  zip_source:
    description: 'Path (file or directory) to zip'
    required: false
    default: '.'
  ftp_host:
    description: 'FTP server hostname'
    required: true
  ftp_user:
    description: 'FTP username'
    required: true
  ftp_password:
    description: 'FTP password'
    required: true
  ftp_remote_path:
    description: 'Remote directory on FTP server (e.g. /public_html/uploads)'
    required: true
  php_script_url:
    description: 'Public URL to call for unzipping (e.g. https://example.com/uploads/unzip.php)'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Generate PHP unzip script
      shell: bash
      run: |
        cat << 'EOF' > unzip-${{ github.run_id }}.php
        <?php
        // unzip.php — automatically generated by GitHub Action
        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            http_response_code(405);
            exit('Method Not Allowed');
        }
        if (empty($_POST['file'])) {
            http_response_code(400);
            exit('Missing "file" parameter.');
        }
        $filename = basename($_POST['file']);
        $uploadDir = __DIR__;
        $zipPath   = $uploadDir . DIRECTORY_SEPARATOR . $filename;
        if (!file_exists($zipPath)) {
            http_response_code(404);
            exit('File not found: ' . htmlentities($filename));
        }
        $zip = new ZipArchive;
        if ($zip->open($zipPath) === TRUE) {
            $zip->extractTo($uploadDir);
            $zip->close();
            echo '✅ Unzipped successfully to ' . htmlentities($uploadDir);
        } else {
            http_response_code(500);
            exit('Failed to open zip file.');
        }
        EOF

    - name: Install FTP client (lftp)
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y lftp zip

    - name: Upload PHP unzip script via FTP
      shell: bash
      env:
        FTP_HOST:     ${{ inputs.ftp_host }}
        FTP_USER:     ${{ inputs.ftp_user }}
        FTP_PASSWORD: ${{ inputs.ftp_password }}
        FTP_REMOTE:   ${{ inputs.ftp_remote_path }}
      run: |
        lftp -e "\
          open -u $FTP_USER,$FTP_PASSWORD $FTP_HOST; \
          mkdir -p $FTP_REMOTE; \
          cd $FTP_REMOTE; \
          put unzip-${{ github.run_id }}.php; \
          bye"

    - name: Zip files
      id: zip
      shell: bash
      run: |
        ZIP_NAME=deploy-${{ github.run_id }}.zip
        zip -r "$ZIP_NAME" "${{ inputs.zip_source }}"
        echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_OUTPUT

    - name: Upload ZIP via FTP
      shell: bash
      env:
        FTP_HOST:     ${{ inputs.ftp_host }}
        FTP_USER:     ${{ inputs.ftp_user }}
        FTP_PASSWORD: ${{ inputs.ftp_password }}
        FTP_REMOTE:   ${{ inputs.ftp_remote_path }}
        ZIP_NAME:     ${{ steps.zip.outputs.ZIP_NAME }}
      run: |
        lftp -e "\
          open -u $FTP_USER,$FTP_PASSWORD $FTP_HOST; \
          cd $FTP_REMOTE; \
          put $ZIP_NAME; \
          bye"

    - name: Trigger remote unzip
      shell: bash
      env:
        ZIP_NAME: ${{ steps.zip.outputs.ZIP_NAME }}
      run: |
        curl -X POST \
             -d "file=$ZIP_NAME" \
             "${{ inputs.php_script_url }}/unzip-${{ github.run_id }}.php"

    - name: Delete remnants via FTP
      shell: bash
      env:
        FTP_HOST:     ${{ inputs.ftp_host }}
        FTP_USER:     ${{ inputs.ftp_user }}
        FTP_PASSWORD: ${{ inputs.ftp_password }}
        FTP_REMOTE:   ${{ inputs.ftp_remote_path }}
      run: |
        lftp -e "\
          open -u $FTP_USER,$FTP_PASSWORD $FTP_HOST; \
          cd $FTP_REMOTE; \
          rm unzip-${{ github.run_id }}.php; \
          rm $ZIP_NAME; \
          bye"
